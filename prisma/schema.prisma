// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Shopping List model
model List {
  id    String @id @default(cuid())
  title String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // One-to-many relation with Item
  items     Item[]
}

// Item model with following fields: name, estimated price, actual price, last checked date, created at date, updated at date, list id, tags, and stores
model Item {
  id             String    @id @default(cuid())
  name           String
  estimatedPrice Float?
  actualPrice    Float?
  lastChecked    DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Many-to-one relation with List
  list   List   @relation(fields: [listId], references: [id])
  listId String

  // has one relation with ItemCategory
  category ItemCategory? @relation(fields: [itemCategoryId], references: [id])

  // Many-to-many relation with Tag
  tags Tag[]

  // Many-to-many relation with Store
  stores         Store[]
  itemCategoryId String?
}

// ItemCategory model
model ItemCategory {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // One-to-many relation with Item
  items Item[]
}

// Tag model
model Tag {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Many-to-many relation with Item
  items Item[]
}

// Store model
model Store {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Many-to-many relation with Item
  items Item[]
}
